@model BugTracker.Web.ViewModels.Bugs.DetailsBugsViewModel

@{
    ViewData["Title"] = "Bug Details";
}

<div class="container text-center container-fluid">
    <h1 class="col-lg-12">BugName: @Model.Name</h1>
    <div class="d-flex text-center flex-wrap flex-row bd-highlight mb-3">
        <div class="col-lg-6">
            <h4>@Html.DisplayNameFor(model => model.ReporterFullName)</h4>
            <p>@Html.DisplayFor(model => model.ReporterFullName)</p>
        </div>
        <div class="col-lg-6">
            <h4>@Html.DisplayNameFor(model => model.DueDate)</h4>
            <p>@Html.DisplayFor(model => model.DueDate)</p>
        </div>
    </div>
</div>
<div>
    <hr />
    <div class="container container-fluid">
        <div class="text-center mx-auto card-columns bd-highlight col-12 mb-3">
            @if (Model.Priority.ToString() == "High")
            {
            <div class="card bg-danger text-white shadow">
                <div class="card-body">
                    @Html.DisplayNameFor(model => model.Priority)
                    <div>@Html.DisplayFor(model => model.Priority)</div>
                </div>
            </div>
            }
            @if (Model.Priority.ToString() == "Medium")
            {
            <div class="card bg-warning text-white shadow">
                <div class="card-body">
                    @Html.DisplayNameFor(model => model.Priority)
                    <div>@Html.DisplayFor(model => model.Priority)</div>
                </div>
            </div>
            }
            @if (Model.Priority.ToString() == "Low")
            {
            <div class="card bg-dark text-white shadow">
                <div class="card-body">
                    @Html.DisplayNameFor(model => model.Priority)
                    <div>@Html.DisplayFor(model => model.Priority)</div>
                </div>
            </div>
            }
            @if (Model.Severity.ToString() == "Critical")
            {
            <div class="card bg-danger text-white shadow offset-sm-1">
                <div class="card-body">
                    @Html.DisplayNameFor(model => model.Severity)
                    <div>@Html.DisplayFor(model => model.Severity)</div>
                </div>
            </div>
            }
            @if (Model.Severity.ToString() == "Major")
            {
            <div class="card bg-warning text-white shadow offset-sm-1">
                <div class="card-body">
                    @Html.DisplayNameFor(model => model.Severity)
                    <div>@Html.DisplayFor(model => model.Severity)</div>
                </div>
            </div>
            }
            @if (Model.Severity.ToString() == "Moderate")
            {
            <div class="card bg-dark text-white shadow offset-sm-1">
                <div class="card-body">
                    @Html.DisplayNameFor(model => model.Severity)
                    <div>@Html.DisplayFor(model => model.Severity)</div>
                </div>
            </div>
            }
            @if (Model.Severity.ToString() == "Minor")
            {
            <div class="card bg-secondary text-white shadow offset-sm-1">
                <div class="card-body">
                    @Html.DisplayNameFor(model => model.Severity)
                    <div>@Html.DisplayFor(model => model.Severity)</div>
                </div>
            </div>
            }
            @if (Model.Severity.ToString() == "Trivial")
            {
            <div class="card bg-info text-white shadow offset-sm-1">
                <div class="card-body">
                    @Html.DisplayNameFor(model => model.Severity)
                    <div>@Html.DisplayFor(model => model.Severity)</div>
                </div>
            </div>
            }
            <div class="card bg shadow offset-sm-1">
                <div class="card-body">
                    @Html.DisplayNameFor(model => model.Status)
                    <div>@Html.DisplayFor(model => model.Status)</div>
                </div>
            </div>
        </div>
        <div class="card w-75 mx-auto shadow text-info text-center">
            <div class="card-body">
                <h5 class="card-title">@Html.DisplayNameFor(model => model.Description)</h5>
                <p class="card-text">@Html.DisplayFor(model => model.Description)</p>
            </div>
        </div>
        <br />
        <div>
            @if (Model.Assignments.Count != 0 && Model.Assignments.Any(x=>x.Completed == false))
            {
            <h2 class="row-12 text-center">Assignments:</h2>
            @foreach (var assignment in Model.Assignments)
                {
                    if (assignment.Completed)
                    {
                        continue;
                    }

            <div id="@assignment.Id">
                <dl class="row">
                    <dt class="col-sm-3">@Html.DisplayNameFor(model => assignment.Title)</dt>
                    <dt class="col-sm-6">@Html.DisplayNameFor(model => assignment.Description)</dt>
                    <dt class="col-sm-3">@Html.DisplayNameFor(model => assignment.AssignedByUserName)</dt>
                </dl>
                <dl class="row">
                    <dd class="col-sm-3">@Html.DisplayFor(model => assignment.Title)</dd>
                    <dd class="col-sm-6">@Html.DisplayFor(model => assignment.Description)</dd>
                    <dd class="col-sm-3">@Html.DisplayFor(model => assignment.AssignedByUserName)</dd>
                </dl>
                <div class="row justify-content-center">
                    <form id="completedForm" method="post"></form>
                    <div>
                        <button type="button" class="btn btn-success" onclick="CompleteAssignment(@assignment.Id)">Mark as Complete</button>
                    </div>
                </div>
            </div>
                }
            <hr />
            }
        </div>
        <div>
            @if (Model.BugHistories.Count != 0)
            {
            <h2 class="row-12 text-center">Bug History:</h2>
            <table class="table table-bordered table-hover text-center">
                <thead>
                    <tr>
                        <th scope="col">
                            Value Name
                        </th>
                        <th scope="col">
                            Old Value
                        </th>
                        <th scope="col">
                            New Value
                        </th>
                        <th scope="col">
                            Modified On
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var history in Model.BugHistories)
                {
                    <tr style="transform: rotate(0);" class="bg-info text-white">
                        <td>
                            @Html.DisplayFor(model => history.ChangedValueName)
                        </td>
                        <td>
                            @Html.DisplayFor(model => history.OldValue)
                        </td>
                        <td>
                            @Html.DisplayFor(model => history.NewValue)
                        </td>
                        <td>
                            <time datetime="@history.ModifiedOn.ToString("O")"></time>
                        </td>
                    </tr>
                 }
                </tbody>
            </table>
            }
        </div>
    </div>
</div>

<div>
    <a class="btn btn-primary" asp-action="AddChange" asp-controller="Bugs" asp-route-id="@Model.Id">Add change to Bug history</a>
    @if (this.User.IsInRole("CompanyAdministrator") || this.User.IsInRole("ProjectAdministrator"))
    {
    <a class="btn btn-primary" asp-area="Administration" asp-controller="Assignments" asp-action="Create" asp-route-id="@Model.Id">Create Assignment</a>
    }
    <a class="btn btn-primary" asp-action="Edit" asp-controller="Bugs" asp-route-id="@Model.Id">Edit</a>
    <a class="btn btn-primary" asp-action="Details" asp-controller="Projects" asp-route-id="@Model.ProjectId">Back to Project details</a>
</div>

@section Scripts {
    <script>
        function CompleteAssignment(assignmentId) {
            var token = $("#completedForm input[name=__RequestVerificationToken]").val();
            var json = { assignmentId: assignmentId };
            $.ajax({
                url: "/api/CompleteAssignment",
                type: "POST",
                data: JSON.stringify(json),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                headers: { 'X-CSRF-TOKEN': token },
                success: function (data) {
                    document.getElementById(assignmentId).style.display = "none";
                }
            });
        }

    </script>
}